// width height
@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}

// absoluteCenter
@mixin absoluteCenter($direction: "left", $position: absolute) {
    position: $position;

    @if $direction == "left" {
        left: 50%;
        transform: translateX(-50%);
    }
    @if $direction == "top" {
        top: 50%;
        transform: translateY(-50%);
    }
    @if $direction == "both" {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
}

// absolute full
@mixin absoluteFull() {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

// maxWidth
@mixin maxWidth($breakpoint) {
    @media screen and (max-width: $breakpoint) {
        @content;
    }
}

// minWidth
@mixin minWidth($breakpoint) {
    @media screen and (min-width: $breakpoint) {
        @content;
    }
}

// flexbox
@mixin flexbox(
    $align-item: stretch,
    $justify-content: flex-start,
    $direction: row,
    $flex: flex,
    $wrap: nowrap
) {
    display: $flex;
    align-items: $align-item;
    justify-content: $justify-content;
    flex-direction: $direction;
    flex-wrap: $wrap;
}

// hidescroll
@mixin hideScroll() {
    -ms-overflow-style: none;
    scrollbar-width: none;
    &::-webkit-scrollbar {
        display: none;
    }
}

// text clamp
@mixin textClamp($row: 1, $size: 100%) {
    display: -webkit-box;
    -webkit-line-clamp: $row;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    width: $size;
    max-width: size;
    white-space: pre-wrap;
    word-break: break-all;
}

// hover Effect
@mixin hoverEffect($itemClass, $contentClass, $transform: "true") {
    #{$itemClass} {
        position: relative;
        z-index: 1;
        cursor: pointer;
        transition: all 0.25s linear;

        #{$contentClass} {
            @include absoluteFull();
            opacity: 0;
            visibility: hidden;
            z-index: 10;
            background: linear-gradient(
                to bottom,
                rgba($primary-color, 0.8),
                rgba($secondary-color, 0.88)
            );
            @include flexbox(center, center, column);
            transition: all 0.25s linear;
        }
        @if $transform == "true" {
            &::after {
                content: "";
                @include absoluteFull();
                background-color: $third-color;
                z-index: -1;
                transition: all 0.25s linear;
            }
        }
        &:hover {
            #{$contentClass} {
                opacity: 1;
                visibility: visible;
            }

            @if $transform == "true" {
                transform: translate(-1rem, -1rem);
                &::after {
                    transform: translate(1rem, 1rem);
                }
            }
        }
    }
}

@mixin color($config: ()) {
    $config: extend(
        (color :red),
        $config
    );

    color: map-get($config, color )
}
